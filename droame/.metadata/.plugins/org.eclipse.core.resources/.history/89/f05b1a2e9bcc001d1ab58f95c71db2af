package org.droame.autonomous.controller;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import  org.droame.autonomous.exception.ResourceNotFoundException;
import org.droame.autonomous.model.Customer;
import org.droame.autonomous.repository.CustomerRepository;

@RestController 
@CrossOrigin(origins = "http://localhost:3306")
@RequestMapping("/cusomer")

public class CutomerController {
	
	 @Autowired
	    private CustomerRepository customerRepository;

	    @GetMapping("/customer")
	    public List<Customer> getAllCustomer() {
	        return customerRepository.findAll();
	    }

	    @GetMapping("/customer/{id}")
	    public ResponseEntity<Customer> getCustomerById(@PathVariable(value = "id") Long customerId)
	        throws ResourceNotFoundException {
	    	Customer customer = customerRepository.findById(customerId)
	          .orElseThrow(() -> new ResourceNotFoundException("Customer not found for this id :: " + customerId));
	        return ResponseEntity.ok().body(customer);
	    }
	    
	    @PostMapping("/customer")
	    public Customer createEmployee(@Valid @RequestBody Customer customer) {
	        return customerRepository.save(customer);
	    }

	    @PutMapping("/customer/{id}")
	    public ResponseEntity<Customer> updateCustomer(@PathVariable(value = "id") Long customerId,
	         @Valid @RequestBody Customer customerDetails) throws ResourceNotFoundException {
	    	Customer customer = customerRepository.findById(customerId)
	        .orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + customerId));

	        customer.setName(customerDetails.getName());
	        customer.setEmailId(customerDetails.getEmailId());
	        customer.setPhoneNumber(customerDetails.getPhoneNumber());
	        customer.setAddress(customerDetails.getAddress());
	        customer.setCity(customerDetails.getCity());
	        customer.setState(customerDetails.getState());
	        customer.setPincode(customerDetails.getPincode());
	        final Customer updatedCustomer = customerRepository.save(customer);
	        return ResponseEntity.ok(updatedCustomer);
	    }


}
